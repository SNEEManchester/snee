package uk.ac.manchester.cs.snee.sncb;

/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'DeliverMessage'
 * message type.
 */

public class DeliverMessage extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 18;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 20;

    /** Create a new DeliverMessage of size 18. */
    public DeliverMessage() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new DeliverMessage of the given data_length. */
    public DeliverMessage(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DeliverMessage with the given data_length
     * and base offset.
     */
    public DeliverMessage(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DeliverMessage using the given byte array
     * as backing store.
     */
    public DeliverMessage(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DeliverMessage using the given byte array
     * as backing store, with the given base offset.
     */
    public DeliverMessage(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DeliverMessage using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public DeliverMessage(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DeliverMessage embedded in the given message
     * at the given base offset.
     */
    public DeliverMessage(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DeliverMessage embedded in the given message
     * at the given base offset and length.
     */
    public DeliverMessage(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <DeliverMessage> \n";
      try {
        s += "  [tuples.evalEpoch=";
        for (int i = 0; i < 3; i++) {
          s += "0x"+Long.toHexString(getElement_tuples_evalEpoch(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [tuples.castilla_id=";
        for (int i = 0; i < 3; i++) {
          s += "0x"+Long.toHexString(getElement_tuples_castilla_id(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [tuples.castilla_light=";
        for (int i = 0; i < 3; i++) {
          s += "0x"+Long.toHexString(getElement_tuples_castilla_light(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: tuples.evalEpoch
    //   Field type: int[]
    //   Offset (bits): 0
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'tuples.evalEpoch' is signed (false).
     */
    public static boolean isSigned_tuples_evalEpoch() {
        return false;
    }

    /**
     * Return whether the field 'tuples.evalEpoch' is an array (true).
     */
    public static boolean isArray_tuples_evalEpoch() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'tuples.evalEpoch'
     */
    public static int offset_tuples_evalEpoch(int index1) {
        int offset = 0;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 48;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'tuples.evalEpoch'
     */
    public static int offsetBits_tuples_evalEpoch(int index1) {
        int offset = 0;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 48;
        return offset;
    }

    /**
     * Return the entire array 'tuples.evalEpoch' as a int[]
     */
    public int[] get_tuples_evalEpoch() {
        int[] tmp = new int[3];
        for (int index0 = 0; index0 < numElements_tuples_evalEpoch(0); index0++) {
            tmp[index0] = getElement_tuples_evalEpoch(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'tuples.evalEpoch' from the given int[]
     */
    public void set_tuples_evalEpoch(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_tuples_evalEpoch(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'tuples.evalEpoch'
     */
    public int getElement_tuples_evalEpoch(int index1) {
        return (int)getUIntBEElement(offsetBits_tuples_evalEpoch(index1), 16);
    }

    /**
     * Set an element of the array 'tuples.evalEpoch'
     */
    public void setElement_tuples_evalEpoch(int index1, int value) {
        setUIntBEElement(offsetBits_tuples_evalEpoch(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'tuples.evalEpoch'
     */
    public static int totalSize_tuples_evalEpoch() {
        return (144 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'tuples.evalEpoch'
     */
    public static int totalSizeBits_tuples_evalEpoch() {
        return 144;
    }

    /**
     * Return the size, in bytes, of each element of the array 'tuples.evalEpoch'
     */
    public static int elementSize_tuples_evalEpoch() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'tuples.evalEpoch'
     */
    public static int elementSizeBits_tuples_evalEpoch() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'tuples.evalEpoch'
     */
    public static int numDimensions_tuples_evalEpoch() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'tuples.evalEpoch'
     */
    public static int numElements_tuples_evalEpoch() {
        return 3;
    }

    /**
     * Return the number of elements in the array 'tuples.evalEpoch'
     * for the given dimension.
     */
    public static int numElements_tuples_evalEpoch(int dimension) {
      int array_dims[] = { 3,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: tuples.castilla_id
    //   Field type: int[]
    //   Offset (bits): 16
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'tuples.castilla_id' is signed (false).
     */
    public static boolean isSigned_tuples_castilla_id() {
        return false;
    }

    /**
     * Return whether the field 'tuples.castilla_id' is an array (true).
     */
    public static boolean isArray_tuples_castilla_id() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'tuples.castilla_id'
     */
    public static int offset_tuples_castilla_id(int index1) {
        int offset = 16;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 48;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'tuples.castilla_id'
     */
    public static int offsetBits_tuples_castilla_id(int index1) {
        int offset = 16;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 48;
        return offset;
    }

    /**
     * Return the entire array 'tuples.castilla_id' as a int[]
     */
    public int[] get_tuples_castilla_id() {
        int[] tmp = new int[3];
        for (int index0 = 0; index0 < numElements_tuples_castilla_id(0); index0++) {
            tmp[index0] = getElement_tuples_castilla_id(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'tuples.castilla_id' from the given int[]
     */
    public void set_tuples_castilla_id(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_tuples_castilla_id(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'tuples.castilla_id'
     */
    public int getElement_tuples_castilla_id(int index1) {
        return (int)getUIntBEElement(offsetBits_tuples_castilla_id(index1), 16);
    }

    /**
     * Set an element of the array 'tuples.castilla_id'
     */
    public void setElement_tuples_castilla_id(int index1, int value) {
        setUIntBEElement(offsetBits_tuples_castilla_id(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'tuples.castilla_id'
     */
    public static int totalSize_tuples_castilla_id() {
        return (144 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'tuples.castilla_id'
     */
    public static int totalSizeBits_tuples_castilla_id() {
        return 144;
    }

    /**
     * Return the size, in bytes, of each element of the array 'tuples.castilla_id'
     */
    public static int elementSize_tuples_castilla_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'tuples.castilla_id'
     */
    public static int elementSizeBits_tuples_castilla_id() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'tuples.castilla_id'
     */
    public static int numDimensions_tuples_castilla_id() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'tuples.castilla_id'
     */
    public static int numElements_tuples_castilla_id() {
        return 3;
    }

    /**
     * Return the number of elements in the array 'tuples.castilla_id'
     * for the given dimension.
     */
    public static int numElements_tuples_castilla_id(int dimension) {
      int array_dims[] = { 3,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: tuples.castilla_light
    //   Field type: int[]
    //   Offset (bits): 32
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'tuples.castilla_light' is signed (false).
     */
    public static boolean isSigned_tuples_castilla_light() {
        return false;
    }

    /**
     * Return whether the field 'tuples.castilla_light' is an array (true).
     */
    public static boolean isArray_tuples_castilla_light() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'tuples.castilla_light'
     */
    public static int offset_tuples_castilla_light(int index1) {
        int offset = 32;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 48;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'tuples.castilla_light'
     */
    public static int offsetBits_tuples_castilla_light(int index1) {
        int offset = 32;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 48;
        return offset;
    }

    /**
     * Return the entire array 'tuples.castilla_light' as a int[]
     */
    public int[] get_tuples_castilla_light() {
        int[] tmp = new int[3];
        for (int index0 = 0; index0 < numElements_tuples_castilla_light(0); index0++) {
            tmp[index0] = getElement_tuples_castilla_light(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'tuples.castilla_light' from the given int[]
     */
    public void set_tuples_castilla_light(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_tuples_castilla_light(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'tuples.castilla_light'
     */
    public int getElement_tuples_castilla_light(int index1) {
        return (int)getUIntBEElement(offsetBits_tuples_castilla_light(index1), 16);
    }

    /**
     * Set an element of the array 'tuples.castilla_light'
     */
    public void setElement_tuples_castilla_light(int index1, int value) {
        setUIntBEElement(offsetBits_tuples_castilla_light(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'tuples.castilla_light'
     */
    public static int totalSize_tuples_castilla_light() {
        return (144 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'tuples.castilla_light'
     */
    public static int totalSizeBits_tuples_castilla_light() {
        return 144;
    }

    /**
     * Return the size, in bytes, of each element of the array 'tuples.castilla_light'
     */
    public static int elementSize_tuples_castilla_light() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'tuples.castilla_light'
     */
    public static int elementSizeBits_tuples_castilla_light() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'tuples.castilla_light'
     */
    public static int numDimensions_tuples_castilla_light() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'tuples.castilla_light'
     */
    public static int numElements_tuples_castilla_light() {
        return 3;
    }

    /**
     * Return the number of elements in the array 'tuples.castilla_light'
     * for the given dimension.
     */
    public static int numElements_tuples_castilla_light(int dimension) {
      int array_dims[] = { 3,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

}
