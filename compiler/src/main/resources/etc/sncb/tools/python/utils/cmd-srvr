#!/usr/bin/env python

import sys, stat, struct, subprocess, time, os.path
try:
    import tos
except ImportError:
    import posix
    sys.path = [os.path.join(posix.environ['TOSROOT'], 'support', 'sdk', 'python')] + sys.path
    import tos
from datetime import datetime

# TinyOS serial communication parameters
AMID = 0x01

# Basestation commands
CMD_START         = 0x0
CMD_STOP          = 0x1
CMD_REPROGRAM     = 0x2

class SerialPacket(tos.Packet):
    def __init__(self, packet = None):
        tos.Packet.__init__(self,
                            [('cmd',    'int',  1),
                             ('imgNum', 'int',  1)],
                            packet)

def start():
    serialPacket = SerialPacket((CMD_START, 0))
    success = am.write(serialPacket, AMID)
    return success

def stop():
    serialPacket = SerialPacket((CMD_STOP, 0))
    success = am.write(serialPacket, AMID)
    return success

def reprogram(imgNum):
    serialPacket = SerialPacket((CMD_REPROGRAM, imgNum))
    success = am.write(serialPacket, AMID)
    return success

def print_usage():
    print "USAGE"

def checkImgNum():
    global imgNum
    # Checks for valid image number format
    try:
        imgNum = int(sys.argv[3])
    except:
        print "ERROR: Image number is not valid"
        sys.exit(-1)
    return imgNum

# ======== MAIN ======== #

if len(sys.argv) >= 3:

    am = tos.AM()

    if sys.argv[2] in ["-r", "--reprogram"]:
        checkImgNum()
        if reprogram(imgNum) == True:
            print "Command sent"
    elif sys.argv[2] in ["--start"]:
        if start() == True:
            print "Command sent"
    elif sys.argv[2] in ["--stop"]:
        if stop() == True:
            print "Command sent"
    else:
        print_usage()

else:
    print_usage()

sys.exit()
