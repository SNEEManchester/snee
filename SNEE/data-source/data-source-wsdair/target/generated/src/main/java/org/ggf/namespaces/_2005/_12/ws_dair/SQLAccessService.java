
/*
 * 
 */

package org.ggf.namespaces._2005._12.ws_dair;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;
import org.ggf.namespaces._2005._12.ws_dai.CoreDataAccessPT;
import org.ggf.namespaces._2005._12.ws_dai.CoreResourceListPT;

/**
 * This class was generated by Apache CXF 2.2.8
 * Thu Jul 14 09:06:38 EEST 2011
 * Generated source version: 2.2.8
 * 
 */


@WebServiceClient(name = "SQLAccessService", 
                  wsdlLocation = "file:/home/lebiathan/Programming/galileo/workspace-ssg4e/snee-a/SNEE/data-source/data-source-wsdair/target/wsdl/wsdair/sqlaccess_service_service.wsdl",
                  targetNamespace = "http://www.ggf.org/namespaces/2005/12/WS-DAIR") 
public class SQLAccessService extends Service {

    public final static URL WSDL_LOCATION;
    public final static QName SERVICE = new QName("http://www.ggf.org/namespaces/2005/12/WS-DAIR", "SQLAccessService");
    public final static QName AccessServiceCoreResourceListPT = new QName("http://www.ggf.org/namespaces/2005/12/WS-DAIR", "AccessServiceCoreResourceListPT");
    public final static QName AccessServiceAccessFactoryPT = new QName("http://www.ggf.org/namespaces/2005/12/WS-DAIR", "AccessServiceAccessFactoryPT");
    public final static QName AccessServiceCoreDataAccessPT = new QName("http://www.ggf.org/namespaces/2005/12/WS-DAIR", "AccessServiceCoreDataAccessPT");
    public final static QName AccessServiceAccessPT = new QName("http://www.ggf.org/namespaces/2005/12/WS-DAIR", "AccessServiceAccessPT");
    static {
        URL url = null;
        try {
            url = new URL("file:/home/lebiathan/Programming/galileo/workspace-ssg4e/snee-a/SNEE/data-source/data-source-wsdair/target/wsdl/wsdair/sqlaccess_service_service.wsdl");
        } catch (MalformedURLException e) {
            System.err.println("Can not initialize the default wsdl from file:/home/lebiathan/Programming/galileo/workspace-ssg4e/snee-a/SNEE/data-source/data-source-wsdair/target/wsdl/wsdair/sqlaccess_service_service.wsdl");
            // e.printStackTrace();
        }
        WSDL_LOCATION = url;
    }

    public SQLAccessService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public SQLAccessService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public SQLAccessService() {
        super(WSDL_LOCATION, SERVICE);
    }

    /**
     * 
     * @return
     *     returns CoreResourceListPT
     */
    @WebEndpoint(name = "AccessServiceCoreResourceListPT")
    public CoreResourceListPT getAccessServiceCoreResourceListPT() {
        return super.getPort(AccessServiceCoreResourceListPT, CoreResourceListPT.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CoreResourceListPT
     */
    @WebEndpoint(name = "AccessServiceCoreResourceListPT")
    public CoreResourceListPT getAccessServiceCoreResourceListPT(WebServiceFeature... features) {
        return super.getPort(AccessServiceCoreResourceListPT, CoreResourceListPT.class, features);
    }
    /**
     * 
     * @return
     *     returns SQLAccessFactoryPT
     */
    @WebEndpoint(name = "AccessServiceAccessFactoryPT")
    public SQLAccessFactoryPT getAccessServiceAccessFactoryPT() {
        return super.getPort(AccessServiceAccessFactoryPT, SQLAccessFactoryPT.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SQLAccessFactoryPT
     */
    @WebEndpoint(name = "AccessServiceAccessFactoryPT")
    public SQLAccessFactoryPT getAccessServiceAccessFactoryPT(WebServiceFeature... features) {
        return super.getPort(AccessServiceAccessFactoryPT, SQLAccessFactoryPT.class, features);
    }
    /**
     * 
     * @return
     *     returns CoreDataAccessPT
     */
    @WebEndpoint(name = "AccessServiceCoreDataAccessPT")
    public CoreDataAccessPT getAccessServiceCoreDataAccessPT() {
        return super.getPort(AccessServiceCoreDataAccessPT, CoreDataAccessPT.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CoreDataAccessPT
     */
    @WebEndpoint(name = "AccessServiceCoreDataAccessPT")
    public CoreDataAccessPT getAccessServiceCoreDataAccessPT(WebServiceFeature... features) {
        return super.getPort(AccessServiceCoreDataAccessPT, CoreDataAccessPT.class, features);
    }
    /**
     * 
     * @return
     *     returns SQLAccessPT
     */
    @WebEndpoint(name = "AccessServiceAccessPT")
    public SQLAccessPT getAccessServiceAccessPT() {
        return super.getPort(AccessServiceAccessPT, SQLAccessPT.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SQLAccessPT
     */
    @WebEndpoint(name = "AccessServiceAccessPT")
    public SQLAccessPT getAccessServiceAccessPT(WebServiceFeature... features) {
        return super.getPort(AccessServiceAccessPT, SQLAccessPT.class, features);
    }

}
